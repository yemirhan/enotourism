generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum UserType {
  GUIDE
  WINERY
  TASTER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum WineTypes {
  HEAVY  @map("Heavy")
  SILKY  @map("silky")
  SHARP  @map("sharp")
  BRIGHT @map("bright")
  GRITTY @map("gritty")
  SMOOTH @map("smooth")
}

enum CountryList {
  Albania
  Argentina
  Armenia
  Australia
  Austria
  Azerbaijan
  Belgium
  Bolivia
  BosniaHerzegovina
  Brazil
  Bulgaria
  Canada
  Chile
  China
  Croatia
  Cyprus
  CzechRepublic
  Denmark
  Estonia
  Finland
  France
  Georgia
  Germany
  Greece
  Hungary
  Israel
  Italy
  Kazakhstan
  Latvia
  Lebanon
  Lithuania
  Luxembourg
  Malta
  Mexico
  Moldova
  Montenegro
  Morocco
  Namibia
  Netherlands
  NewZealand
  NorthernMacedonia
  Peru
  Poland
  Portugal
  Romania
  Russia
  Serbia
  Slovakia
  Slovenia
  SouthAfrica
  Spain
  Sweden
  Switzerland
  Thailand
  Turkey
  Ukraine
  UnitedKingdom
  Uruguay
  USA
  Uzbekistan
  Vietnam
}

model User {
  id           String           @id @default(cuid())
  email        String           @unique
  password     String
  name         String?
  surname      String?
  gender       Gender?          @default(OTHER)
  phone_number String?
  address      Address?
  photo        String?          @default("https://media.istockphoto.com/id/1288129985/vector/missing-image-of-a-person-placeholder.jpg?s=612x612&w=0&k=20&c=9kE777krx5mrFHsxx02v60ideRWvIgI1RWzR1X4MG2Y=")
  about        String?
  user_type    UserType         @default(TASTER)
  Winery       Winery[]
  Tour         Tour[]
  Reservation  Reservation[]
  time_slots   GuideTimeSlots[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([id, user_type])
}

model Address {
  id                 String   @id @default(cuid())
  street             String
  city               String
  flat               String?
  address            String
  is_contact_address Boolean  @default(true)
  postcode           String?
  country            Country  @relation(fields: [countryId], references: [id])
  countryId          String
  // region             Region[]
  user_id            String   @unique
  user               User     @relation(fields: [user_id], references: [id])
  Winery             Winery[]

  @@index([countryId], name: "countryId")
}

model Country {
  id      String    @id @default(cuid())
  name    String
  code    String
  emoji   String
  unicode String
  image   String
  //Address     Address?        @relation(fields: [addressId], references: [id])
  //addressId   String?
  Winery  Winery[]
  Address Address[]
}

// model RegionPhotos {
//   id       String @id @default(cuid())
//   regionId String
//   region   Region @relation(fields: [regionId], references: [id])
//   url      String
// }

model Region {
  id   String @id @default(cuid())
  name String

  description String
  // Address     Address?       @relation(fields: [addressId], references: [id])
  // addressId   String?
}

model Winery {
  id           String         @id @default(cuid())
  name         String
  description  String
  photos       WineryPhotos[]
  address      Address?       @relation(fields: [addressId], references: [id])
  addressId    String?
  email        String
  history      String
  awards       String
  language     Language[]
  owner        User           @relation(fields: [userId], references: [id])
  userId       String
  WorkingHours WorkingHours[]
  Tour         Tour[]
  Wine         Wine[]
  Offer        Offer[]
  country      Country        @relation(fields: [countryId], references: [id])
  countryId    String

  @@index([countryId])
  @@index([userId])
  @@index([addressId])
}

model WineryPhotos {
  id       String @id @default(cuid())
  wineryId String
  winery   Winery @relation(fields: [wineryId], references: [id])
  url      String

  @@index([wineryId])
}

model Language {
  id       String  @id @default(cuid())
  name     String
  flag     String
  Winery   Winery? @relation(fields: [wineryId], references: [id])
  wineryId String?

  @@index([wineryId])
}

model WorkingHours {
  id       String  @id @default(cuid())
  day      String
  open     String
  close    String
  Winery   Winery? @relation(fields: [wineryId], references: [id])
  wineryId String?

  @@index([wineryId])
}

model Tour {
  id               String  @id @default(cuid())
  name             String
  description      String
  number_of_people Int
  Winery           Winery? @relation(fields: [wineryId], references: [id])
  wineryId         String?
  tour_guide       User    @relation(fields: [tourGuideId], references: [id])
  tourGuideId           String
  offer            Offer   @relation(fields: [offerId], references: [id])
  offerId          String

  @@index([wineryId])
  @@index([tourGuideId])
  @@index([offerId])
}

model Wine {
  id                String    @id @default(cuid())
  name              String
  brief_description String
  color             String
  taste             String
  texture           WineTypes
  Winery            Winery?   @relation(fields: [wineryId], references: [id])
  wineryId          String?

  
}

model Offer {
  id                   String          @id @default(cuid())
  name                 String
  description          String
  price                Int
  winery               Winery?          @relation(fields: [wineryId], references: [id])
  offer_types          OfferType[]
  adult_price          Decimal
  kid_price            Decimal
  photos               OfferPhoto[]
  max_number_of_people Int
  duration             Int
  wineryId             String?
  OfferTimeSlot        OfferTimeSlot[]
  Reservation          Reservation[]
  Tour                 Tour[]

  
}

model OfferPhoto {
  id      String @id @default(cuid())
  offerId String
  offer   Offer  @relation(fields: [offerId], references: [id])
  url     String

  @@index([offerId])
}

enum OfferTypeEnum {
  TASTING         @map("Visit and Tasting")
  GUIDES          @map("Wine Guides")
  EXTRAACTIVITIES @map("Extra Activities")
  ACCOMODATION    @map("Accomodation")
  RESTAURANT      @map("Restaurant")
}

model OfferType {
  id      String        @id @default(cuid())
  name    OfferTypeEnum
  offers  Offer         @relation(fields: [offerId], references: [id])
  offerId String

  @@index([offerId])
}

model OfferTimeSlot {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  offerId   String
  offer     Offer    @relation(fields: [offerId], references: [id])

  @@index([offerId])
}

enum StatusType {
  PENDING
  ACCEPTED
  REJECTED
  DONE
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model GuideTimeSlots {
  id        String @id @default(cuid())
  date      Days
  startTime Int
  endTime   Int
  guideId   String
  guide     User   @relation(fields: [guideId], references: [id])
}

model Status {
  id     String     @id @default(cuid())
  status StatusType @default(PENDING)

  Reservation Reservation[]
}

model Reservation {
  id               String   @id @default(cuid())
  date             DateTime
  from_time        Int
  to_time          Int
  slug             String
  number_of_people Int
  number_of_kids   Int
  offerId          String
  offer            Offer    @relation(fields: [offerId], references: [id])
  statusId         String
  status           Status   @relation(fields: [statusId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
